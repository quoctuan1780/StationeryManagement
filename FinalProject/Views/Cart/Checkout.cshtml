@{
    ViewData["Title"] = "Giỏ hàng";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var cartItems = ViewBag.CartItems as IList<Entities.Models.CartItem>;

    decimal cartTotal = 0;

    cartTotal = (decimal)ViewBag.CartTotal;
}
<div class="breadcrumbs">
    <div class="container">
        <div class="row">
            <ul>
                <li class="home">
                    <a asp-action="Index" asp-controller="Home" title="Go to Home Page">Trang chủ</a>
                    <span>|</span>
                </li>
                <li class="category3">
                    <strong>Xem giỏ hàng</strong>
                </li>
            </ul>
        </div>
    </div>
</div>
<div id="box-content">
    <div class="position-02">
        <div class="container">
            <div class="row">
                <div class="">
                    <h1>Thông tin giỏ hàng</h1>
                    <div class="table-wrap">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Tên sản phẩm</th>
                                    <th>Hình ảnh</th>
                                    <th>Phân loại hàng</th>
                                    <th>Xuất xứ</th>
                                    <th>Số lượng</th>
                                    <th>Đơn giá</th>
                                    <th>Thành tiền</th>
                                    <th>Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in cartItems)
                                {
                                    <tr>
                                        <td><a asp-action="Detail" asp-controller="Product" asp-route-id="@item.ProductDetail.Product.ProductId">@item.ProductDetail.Product.ProductName</a></td>
                                        <td>
                                            @if (item.ProductDetail.Product.ProductImages is null || item.ProductDetail.Product.ProductImages.FirstOrDefault() is null)
                                            {
                                                <img src="~/images/product/img_1.jpg" alt="Ảnh" width="60" height="60">
                                            }
                                            else
                                            {
                                                <img src="~/images/product/@item.ProductDetail.Product.ProductImages.FirstOrDefault().Image" alt="Ảnh" width="60" height="60">
                                            }
                                        </td>
                                        <td>@item.ProductDetail.Color</td>
                                        <td>@item.ProductDetail.Origin</td>
                                        <td>
                                            @if (item.IsStocking)
                                            {
                                                <button class="btn btn-danger" style="height: 30px;" type="button" onclick="decrease(this, @item.ProductDetailId, @item.ProductDetail.Quantity, @item.Price)">
                                                    -
                                                </button>
                                                <input type="text" name="Quantity" min="1" value="@item.Quantity" max="@item.ProductDetail.Quantity"
                                                       class="input-quantity" onkeydown="validateValue(this)" onblur="checkValue()" onchange="setPrice(this, @item.ProductDetailId, @item.ProductDetail.Quantity, @item.Price)">
                                                <button class="btn btn-danger" style="height: 30px" type="button" onclick="ascending(this, @item.ProductDetailId, @item.ProductDetail.Quantity, @item.Price)">
                                                    +
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-danger disabled" style="height: 30px;" type="button">
                                                    -
                                                </button>
                                                <input type="text" name="Quantity" min="1" value="@item.Quantity" max="@item.ProductDetail.Quantity"
                                                       class="input-quantity disabled">
                                                <button class="btn btn-danger disabled" style="height: 30px" type="button">
                                                    +
                                                </button>
                                            }
                                        </td>
                                        <td>@String.Format("{0:n0}", item.Price) VNĐ</td>
                                        <td class="total-item">
                                            @{
                                                var totalItem = item.Price * item.Quantity;
                                            }
                                            @String.Format("{0:n0}", totalItem) VNĐ
                                        </td>
                                        <td><button class="btn btn-danger" type="button" onclick="removeCartItem(this, @item.ProductDetailId, '@item.Price.ToString("G29")', @item.Quantity)"> - </button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-lg-12">
                        <div class="col-lg-8"></div>
                        <div class="col-lg-4" style="text-align: end;">
                            @*<div><b>Tổng tiền gốc: </b><span id="totalOld">15000</span> VNĐ</div>
                            <div><b>Tổng tiền khuyến mãi: </b><span id="totalSale">15000</span> VNĐ</div>*@
                            <div><b>Tổng tiền thanh toán: </b><span id="total">@String.Format("{0:n0}", cartTotal)</span> VNĐ</div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="col-lg-6 text-left">
                            <a asp-action="Index" asp-controller="Home" class="btn btn-warning">Tiếp tục mua sắm</a>
                        </div>
                        <div class="col-lg-6 text-right">
                            <a  asp-action="Order" asp-controller="Order" class="btn btn-success">Đặt hàng</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script src="~/js/notify/notify-helper.js"></script>
    <script src="~/js/loading/loading.js"></script>
    <script>
        $(document).ready(function() {
            $('#left-nav').remove();
            $('#banner').remove();
            $('#cart').remove();

            $(".table-wrap").each(function () {
                var nmtTable = $(this);
                var nmtHeadRow = nmtTable.find("thead tr");
                nmtTable.find("tbody tr").each(function () {
                    var curRow = $(this);
                    for (var i = 0; i < curRow.find("td").length; i++) {
                        var rowSelector = "td:eq(" + i + ")";
                        var headSelector = "th:eq(" + i + ")";
                        curRow.find(rowSelector).attr('data-title', nmtHeadRow.find(headSelector).text());
                    }
                });
            });
        });

        function validateValue(e) {
            
            setInputFilter(e, function (value) {
                return /^\d*$/.test(value) && ((value === "" || parseInt(value) > 0) && parseInt(value) <= parseInt($(e).attr('max')));
            });
        }

        function decrease(e, productDetailId, maxQuantity, price) {
            var node = $(e).parent().children('.input-quantity').get(0);

            var value = parseInt($(node).val());

            if (value > 1) {
                value -= 1;

                $(node).val(value.toString());

                setPrice(e, productDetailId, maxQuantity, price);
            }
        }

        function ascending(e, productDetailId, maxQuantity, price) {
            var node = $(e).parent().children('.input-quantity').get(0);

            var quantity = $(node).val();

            var value = parseInt(quantity);

            var max = parseInt($(node).attr('max'))

            if (value < max)
                value += 1;
            $(node).val(value)

            setPrice(e, productDetailId, maxQuantity, price);
        }

        function setPrice(e, productDetailId, maxQuantity, price) {
            var loading = verticalTextColor();

            loading

            var node = $(e).parent().children('.input-quantity').get(0);

            var quantity = $(node).val();

            if (quantity < 0 || quantity > maxQuantity) {
                loading.out();

                showError("Số lượng bạn nhập nhỏ hơn 0 hoặc lớn hơn tổng sản phẩm sẵn có!", "500px");
            }
            else
                $.ajax({
                    url: "/Cart/ChangeQuantityCartItem",
                    method: "PUT",
                    async: true,
                    data: { productDetailId: productDetailId, quantity: quantity },
                    success: function (data) {
                        loading.out();

                        switch (parseFloat(data)) {
                            case -99:
                                showError('Lỗi hệ thống vui lòng tải lại trang!');
                                break;
                            case -4:
                                showError('Sản phẩm hoặc số lượng bạn nhập không hợp lệ!', '450px');
                                break;
                            default:
                                $("#total").text(data);
                                var total = price * quantity;
                                $($(e).parent().parent().children('.total-item').get(0)).text(total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " VNĐ");
                                break;
                        }
                    },
                    error: function (code, err) {
                        loading.out();

                        showErrorSystem();
                    }
                })
   
        }

        function removeCartItem(e, productDetailId, price, quantity) {
            Swal.fire({
                title: 'Bạn có muốn xóa sản phẩm này không?',
                showDenyButton: true,
                confirmButtonText: `Xóa`,
                denyButtonText: `Hủy`,
            }).then((result) => {
                if (result.isConfirmed) {
                    var loading = verticalTextColor();

                    loading;

                    $.ajax({
                        url: '/Cart/RemoveCartItem',
                        method: 'DELETE',
                        async: true,
                        data: { productDetailId: productDetailId },
                        success: function (data) {
                            loading.out();

                            switch (data) {
                                case "Success":
                                    showSuccess('Xóa sản phẩm thành công');

                                    var total = parseFloat($("#total").text()) - parseFloat(price) * quantity

                                    $(e).parent().parent().remove();

                                    $("#total").text(total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " VNĐ");

                                    break;
                                case "Fail":
                                    showErrorSystem();
                                    break;
                                case "Miss":
                                    showError('Bạn chưa đăng nhập vào hệ thống');
                                    break;
                            }
                        },
                        error: function (code, err) {
                            loading.out();
                            showErrorSystem()
                        }
                    });
                }
            });
        }
    </script>
}