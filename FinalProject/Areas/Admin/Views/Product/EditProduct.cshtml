
@model FinalProject.Areas.Admin.ViewModels.ProductViewModel
@{
    ViewData["Title"] = "Thay đổi thông tin sản phẩm";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var categories = ViewBag.Categories as IList<SelectListItem>;

    var imageRemove = new List<string>();
}


<div class="container-fluid">

    <h1 class="h3 mb-2 text-gray-800">Thay đổi thông tin sản phẩm</h1>
    <hr class="hr-end-list" />
    @if (!(ViewBag.MessageSuccess is null))
    {
        <div class="alert alert-success">@ViewBag.MessageSuccess</div>
    }
    @if (!(ViewBag.MessageExists is null))
    {
        <div class="alert alert-danger">@ViewBag.MessageExists</div>
    }
    @if (!(ViewBag.MessageError is null))
    {
        <div class="alert alert-danger">@ViewBag.MessageError</div>
    }

    @using (Html.BeginForm("EditProduct", "Product", FormMethod.Post, new
    {
        role = "form",
        area = "Admin",
        enctype = "multipart/form-data",
        id = "form"
    }))
    {
        @Html.AntiForgeryToken()

        <input type="hidden" id="images" name="imageRemove" />

        @Html.TextBoxFor(m => m.ProductId, new { @class = "form-control", @name = "id", @id = "id", @type = "hidden" })

        <div class="form-group">
            @Html.LabelFor(m => m.ProductName)
            @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control", @name = "name", @id = "name" })
            @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Description)
            <textarea id="description" name = "description">@Html.Raw(Model.Description)</textarea>
            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Price)
            @Html.TextBoxFor(m => m.Price, new
            {
                @class = "form-control",
                @name = "price",
                @id = "price",
                @type = "number"
            })
            @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CategoryId)
            @Html.DropDownListFor(m => m.CategoryId, categories, new
            {
                @class = "form-control",
           @name = "category-id",
                @id = "category-id",
            })
            @Html.ValidationMessageFor(m => m.CategoryId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group form-flex">
            @foreach (var item in Model.ImagesString)
            {
                <div class="show-image" id="@item.Trim()">
                    <img src="~/images/product/@item" class="image-product" width="150" height="150" />
                    <i class="delete fa fa-times" onclick="confirmDeleteImage('@item', '@item.Trim()')"></i>
                </div>
            }
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Images)
            @Html.TextBoxFor(m => m.Images, new
            {
                @class = "form-control",
                @multiple = "true",
                @type = "file",
                        @id = "images",
                @name = "images"
            })
            @Html.ValidationMessageFor(m => m.Images, "", new { @class = "text-danger" })
        </div>
    }
    <div class="form-group">
        <button type="button" onclick="submit()" class="btn btn-success">Cập nhật sản phẩm</button>
    </div>
</div>
@section Scripts{
    <script>
        CKEDITOR.replace("description", { htmlEncodeOutput: true, enterMode: CKEDITOR.ENTER_DIV });

        var imageRemove = [];

        function confirmDeleteImage(image, id) {
            Swal.fire({
                title: 'Xóa hình ảnh!',
                text: "Bạn có muốn xóa hình ảnh này ?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: `Xóa`,
                cancelButtonText: `Hủy`,
            }).then((result) => {
                if (result.isConfirmed) {
                    if (imageRemove.indexOf(image) === -1) {

                        imageRemove.push(image);

                        document.getElementById(id).remove();
                    }

                    document.getElementById("images").value = imageRemove;
                } 
            })
        }

        function submit() {
            Swal.fire({
                title: 'Cập nhật thông tin ?',
                text: "Bạn có muốn cập nhật thông tin sản phẩm không ?",
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: `Cập nhật`,
                cancelButtonText: `Hủy`,
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById("form").submit();
                }
            })
        }
    </script>
}
